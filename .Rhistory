setwd("C:/Users/hyshim05/Desktop/hw-stat133/binomial/R")
library(binomial)
library(binomial)
library(binomial)
context("test for checker functions")
test_that("check_prob works as intended", {
expect_error(check_prob(0.5), "prob is a number between 0 and 1")
x <- c(seq(0, 1, 4))
expect_error(check_prob(x), "prob has a length of one")
expect_error(check_prob(-0.5), "error arises when prob is invalid")
})
library(binomial)
test_file("bin_choose.R")
library(testthat)
test_file("bin_chooseR")
test_file("bin_choose.R")
test_file("../../R/bin_choose.R")
setwd("C:/Users/hyshim05/Desktop/hw-stat133/binomial/R")
library(testthat)
test_that("bin_choose.R")
library(binomial)
library(testthat)
test_file("bin_choose.R")
getwd()
library(binomial)
library(testthat)
test_file("bin_choose.R")
library(binomial)
library(testthat)
test_file("bin_choose.R")
test_file("bin_choose.R")
library(binomial)
test_file("bin_choose.R")
check_prob(-0.5)
library(binomial)
test_file("bin_choose.R")
library(binomial)
test_file("bin_probability")
test_file("bin_probability.R")
library(binomial)
test_file("bin_probability.R")
source('C:/Users/hyshim05/Desktop/hw-stat133/binomial/testthat/testthat/test_bin_probability.R', echo=TRUE)
test_file("bin_probability.R")
library(binomial)
test_file("bin_probability.R")
test_file("bin_probability.R")
bin1 <- bin_variable(trials = 10, prob = 0.5)
library(binomial)
bin1 <- bin_variable(trials = 10, prob = 0.5)
bin1
bin_mode(bin1)
summary(bini1)
summary(bin1)
return(TRUE)
#' @return data frame with class "bincum" and "data.frame"
#' @export
#' @seealso \code{\link{bin_probability}}
#' @seealso \code{\link{bin_choose}}
#' @examples
#' bin_cumulative(trials = 5, prob = 0.5)
#'
#' # plotting
#' dis2 <- bin_cumulative(5, 0.5)
#' plot(dis2)
bin_cumulative <- function(trials, prob){
check_trials(trials)
check_prob(prob)
success = c(0:trials)
probability = bin_probability(success, trials, prob)
cumulative = c(rep(0, length(success)))
for(i in 2:length(success)){
cumulative[1] = probability[1]
cumulative[i] = probability[i] + cumulative[i - 1]
cumulative
}
cumul <- data.frame(
success = success,
probability = probability,
cumulative = cumulative
)
class(cumul) <- c("bincum", "data.frame")
cumul
}
# private checker function to ensure that probability, p, is valid i.e. between 1 and 0
check_prob <- function(p){
if(p < 0 | p > 1){
stop("Invalid probability value, p has to be a number between 0 and 1")
}
else{
return(TRUE)
}
}
# private checker function to ensure that the value of trials is a non-negative integer
check_trials <- function(trials){
if(trials %% 1 != 0 | trials < 0){
stop("Invalid trials value, trials must be non-negative interger value")
}
else{
return(TRUE)
}
}
# private checker function to ensure that successes are non-negative integer value that is less than or equal to trials
check_success <- function(success, trials){
for(i in 1:length(success)){
if(success[i] %% 1 != 0 | success[i] > trials){
stop("Invalid success value, success cannot be greater than trials")
}
}
return(TRUE)
}
#' @export
plot.bincum <- function(x, ...) {
lines(x$success, x$cumulative, type = "o", xlab = "successes", ylab = "probability")
}
dis2 <- bin_cumulative(10, 0.5)
plot(dis2)
#' @export
plot.bincum <- function(x, ...) {
lines(x$success, x$cumulative, type = "o", xlab = "successes", ylab = "probability")
}
class(dis2)
plot(dis2)
library(binomial)
plot(dis2)
class(dis2)
plot(dis2)
library(binomial)
plot(dis2)
cum1
bum1
cum1
cum1
dis2
library(binomial)
library(binomial)
getwd()
setwd('R)'
f
setwd('R')
getwd()
test_file("bin_probability.R")
library(testthat)
test_file("bin_probability.R")
test_file("bin_variable.R")
test_file("bin_choose.R")
source("C:/Users/hyshim05/Desktop/hw-stat133/binomial/R/bin_choose.R")
test_file("bin_choose.R")
context("test for checker functions")
test_that("check_prob fails with a prob value that is not between 0 and 1", {
expect_error(check_prob(-0.5))
expect_error(check_prob(1.2))
})
test_file("bin_choose.R")
bin_choose(5, 3)
bin_choose(5, 4)
bin_choose(5, 5)
bin_choose(5, 6)
test_file("bin_choose.R")
library(binomial)
source("C:/Users/hyshim05/Desktop/hw-stat133/binomial/R/bin_probability.R")
test_file("bin_probability.R")
test_that("bin_probability fails when k is greater than n", {
x <- 5
y <- 2
z <- 0.5
expect_error(bin_probability(x, y, z))
})
test_that("bin_probability fails with an invalid prob value",{
a <- 2
b <- 5
expect_error(bin_probability(a, b, -0.5), "Invalid probability value, p has to be a number between 0 and 1")
expect_error(bin_probability(a, b, 1.2), "Invalid probability value, p has to be a number between 0 and 1")
})
test_file("bin_probability.R")
library(testthat)
test_file("bin_probability.R")
library(binomial)
test_file("bin_probability.R")
source("../../R/bin_probability.R")
source("../../R/bin_probability.R")
getwd()
library(binomial)
test_file("bin_probability.R")
source("bin_probability.R")
getwd(_)
getwd()
bin_probability(2, 5, 0.5)
library(binomial)
test_file("bin_probability")
test_file("bin_probability.R")
library(binomial)
test_file("bin_probability.R")
library(binomial)
test_file("bin_probability.R")
devtools::test()
library(testthat)
library(binomial)
devtools::test()
devtools::test()
library(binomial)
bin_variable(10, 3)
bin_variable(10, .3)
bin1 <- bin_variable(10, 0.3)
summary(bin1)
library(binomial)
summary(bin1)
library(binomial)
library(binomial)
getwd
getwd()
getwd()
bin_choose(5, 3)
library(binomial)
test_file("MainBinFunctions.R")
library(binomial)
test_file("MainBinFunctions.R")
test_that("MainBinFunctions.R")
library(binomial)
test_file("MainBinFunctions.R")
test_check("binomial")
test_check("MainBinFunctions.R")
library(binomial)
library(binomial)
f]
f
